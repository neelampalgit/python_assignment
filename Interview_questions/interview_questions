Basic Level

    Reverse a string without using any built-in functions.
    Check if a number is prime.
    Find the largest element in an array.
    Find the second largest element in an array.
    Check if a string is a palindrome.
    Count the number of vowels in a string.
    Count the number of occurrences of a character in a string.
    Find the factorial of a number using recursion.
    Swap two numbers without using a temporary variable.
    Sum of all digits in a number.
    Find the Fibonacci series up to n numbers.
    Print a pyramid pattern using stars (*).
    Find the sum of the elements in an array.
    Find the product of all elements in an array.
    Find the common elements between two arrays.

Intermediate Level

    Reverse a linked list.
    Detect a cycle in a linked list.
    Merge two sorted arrays into one sorted array.
    Find the missing number in a given array of 1 to n.
    Find the intersection of two arrays.
    Find the union of two arrays.
    Remove duplicates from an array.
    Find the longest substring without repeating characters.
    Check if two strings are anagrams.
    Find the first non-repeated character in a string.
    Write a function to check if a string contains balanced parentheses.
    Find all pairs in an array that sum to a specific target.
    Implement a queue using two stacks.
    Find the "Kth" largest element in an array.
    Find the longest common prefix in an array of strings.
    Write a program to rotate an array by k positions.
    Find the power of a number (x^y) using recursion.
    Find the GCD (Greatest Common Divisor) of two numbers.
    Find the LCM (Least Common Multiple) of two numbers.
    Write a program to convert a string to an integer.

    Group Anagrams:
    Problem: Given a list of strings, group anagrams together.
    Example: group_anagrams(["eat", "tea", "tan", "ate", "nat", "bat"]) should return [["eat", "tea", "ate"], ["tan", "nat"], ["bat"]]

    Maximum Subarray Sum:
    Problem: Given an array of integers, find the contiguous subarray (containing at least one number) which has the largest sum.
    Example: max_subarray_sum([1, 2, 3, -2, 5]) should return 9.

    Time Delta:
    Problem: Given two timestamps, calculate the absolute difference between them in seconds.
    Example: time_delta('Sun 10 May 2015 13:54:36 -0700', 'Sun 10 May 2015 13:54:36 -0000') should return 25200.

    Reverse Integer:
    Problem: Given a 32-bit signed integer, reverse digits of an integer.
    Example: reverse_integer(123) should return 321

    Find All Occurrences of a Substring:
    Problem: Given a string s and a substring sub, return the list of all starting indices where the substring sub is found in s.
    Example: s = "ababcababc", sub = "ab" → [0, 3, 6].

    Find the First Unique Character in a String:
    Problem: Given a string s, find the first non-repeating character. If none exists, return -1.
    Example: "loveleetcode" → v.

    Add Strings
    Problem: Given two non-negative integers represented as string, return the sum of these two integers also as a string.
    Example: "11", "123" → "134".

    Count and Say:
    Problem: The "count-and-say" sequence is a sequence of digits, starting with 1. Each subsequent term is generated by describing the digits of the previous term.
    Example: For n = 4, the sequence is "1211", which is read as "one 1, one 2, two 1s".

    Longest Palindromic Subsequence:
    Problem: Given a string s, return the length of the longest palindromic subsequence.
    Example: s = "bbabcbab" → 7.

    Check if a String Contains All Characters of Another String:
    Problem: Given two strings s1 and s2, check if s1 contains all characters of s2.
    Example: s1 = "abcde", s2 = "ace" → True

    Length of Last Word:
    Problem: Given a string s, return the length of the last word in the string. A word is defined as a sequence of non-space characters.
    Example: "Hello World" → 5.

    String Permutation Check:
    Problem: Given two strings, check if one string is a permutation of the other.
    Example: s1 = "abc", s2 = "cab" → True.

    Count Substring Occurrences in a String:
    Problem: Given a string s and a substring sub, count the number of occurrences of sub in s.
    Example: "ababab", "ab" → 3.


Advanced Level

    String Compression:Implement a basic string compression algorithm using the counts of repeated characters. For example, the string "aabcccccaaa" would become "a2b1c5a3". If the compressed string is not shorter than the original string, return the original string.
    Example: "aabcccccaaa" → "a2b1c5a3".

    Reverse Words in a String.

    Find all permutations of a string.

